pragma solidity ^0.4.18;

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract Ownable {
  address public owner;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  function Ownable() public {
    owner = msg.sender;
  }

  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}

contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;

  mapping(address => uint256) balances;

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);

    // SafeMath.sub will throw if there is not enough balance.
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

}
contract StandardToken is ERC20, BasicToken {
  mapping (address => mapping (address => uint256)) internal allowed;
  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }

  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  /**
   * @dev Decrease the amount of tokens that an owner allowed to a spender.
   *
   * approve should be called when allowed[_spender] == 0. To decrement
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _subtractedValue The amount of tokens to decrease the allowance by.
   */
  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

}

contract EMUToken is StandardToken
{
    string public constant name = "QWERTYToken";
    string public constant symbol = "QWE";
    uint8 public constant decimals = 4;
    
    function QWERTYToken() public 
    {
        totalSupply = 250000000 * 10 ** uint256(decimals);
        balances[msg.sender] = totalSupply;
        //Transfer(0x0, msg.sender, totalSupply);
    }
}

contract Crowdsale is Ownable
{
    using SafeMath for uint256;
    
    uint256 public constant preIcoStart = 1512136800;
    uint256 public constant preIcoEnd = preIcoStart + 30 days;
    
    uint256 public constant icoStart = 1517493600;
    uint256 public constant icoEnd = icoStart + 45 days;
    
    enum States {PreICO, ICO}
    States public state;
    
    EMUToken public token;
    address public wallet;
    uint256 public constant rate = 9000;
    uint256 public constant softCap = 600 ether;
    uint256 public balance;
    
    mapping(address => uint256) internal balances;
    
    function Crowdsale(address _token, address _wallet) public
    {
        token = EMUToken(_token);
        wallet = _wallet;
        state = States.PreICO;
    }
    
    /*function nextState() onlyOwner public
    {
        require(state == States.NotStarted || state == States.PreICO || state == States.ICO);
        
        if(state == States.NotStarted)
        {
            state = States.PreICO;
        }
        else if(state == States.PreICO)
        {
            state = States.ICO;
        }
        else if(state == States.ICO)
        {
            state = States.Finished;
            
            if(balance >= softCap)
            {
                address contractAddress = this;
                wallet.transfer(contractAddress.balance);
                uint256 tokens = token.balanceOf(contractAddress);
                token.burn(tokens);
            }
        }
    }*/
    
    function buyTokens() internal
    {
        uint256 weiAmount = msg.value;
        uint256 tokens = weiAmount.mul(rate);
        bool success = token.transfer(msg.sender, tokens);
        require(success);
        if(state == States.PreICO)
        {
            wallet.transfer(msg.value);
        }
        saveFunds();
    }
    
    function saveFunds() internal
    {
       balance = balance.add(msg.value);
       if(state == States.ICO)
       {
           balances[msg.sender] = balances[msg.sender].add(msg.value);
       }
    }
    
    function isValidPeriod() internal constant returns (bool)
    {
        if(state == States.PreICO)
        {
            if(now >= preIcoStart && now <= preIcoEnd) return true;
        }
        else if(state == States.ICO)
        {
            if(now >= icoStart && now <= icoEnd) return true;
        }
        
        return false;
    }
    
    function () public payable 
    {
        require(msg.sender != address(0));
        require(msg.value > 0);
        require(isValidPeriod());
        
        buyTokens();
    }
    
    function manualTransfer(address to, uint256 weiAmount) onlyOwner public returns (bool)
    {
        require(to != address(0));
        require(weiAmount > 0);
        require(isValidPeriod());
        
        uint256 tokens = weiAmount.mul(rate);
        bool success = token.transfer(to, tokens);
        if(success)
        {
            balance = balance.add(weiAmount);
        }
        return success;
    }

}
