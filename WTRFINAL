pragma solidity ^0.4.18;

import './ERC20Basic.sol';
import './SafeMath.sol';
import './Owned.sol';
import './BasicToken.sol';
//import './Finalizable.sol';

contract WTRToken is Ownable, BasicToken {
  string public constant name = "WTRToken";
  string public constant symbol = "WTR";
  uint8 public constant decimals = 4;
  uint256 public constant totalSupply = 17500 * (10 ** uint256(decimals));
  uint256 public constant INITIAL_SUPPLY = 8000 * (10 ** uint256(decimals));

  function WTRToken() public {
    balances[msg.sender] = totalSupply;
  }
}

contract WTRPreSale is Ownable, BasicToken{
    using SafeMath for uint;
    address wallet;
    WTRToken public token = new WTRToken();
    uint256 public weiRaised;
    uint start;
    uint period;
    uint rate;
    uint endTime;
    uint amount;
    
    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);
    event Mint(address indexed to, uint256 amount);
    
    function PreSale() public{
        wallet = 0x65380Fbbc49fcf2b32C68E0dC65E83dB00182C8b;
        rate = 100000000000000000000;
        start = 1500379200;
        period = 28;
        endTime = 1516888800;
    }
    
    function buyTokens(address beneficiary)public payable{
        require(beneficiary != 0x0);
        
        uint256 weiAmount = 0.000000000000000125 * 1 ether ;
        // update weiRaised
        //weiRaised = weiRaised.add(weiAmount);
        // compute amount of tokens created
        uint256 tokens = weiAmount.mul(rate);
    
        token.transfer(beneficiary, tokens);
        TokenPurchase(owner, beneficiary, weiAmount, tokens);
        
    }
    
    function hasEnded() public view returns (bool) {
        return now > endTime;
    }
    
}    


/**
 * @title SplitPayment
 * @dev Base contract that supports multiple payees claiming funds sent to this contract
 * according to the proportion they own.
 */
contract SplitPayment {
  using SafeMath for uint256;

  uint256 public totalShares = 0;
  uint256 public totalReleased = 0;

  mapping(address => uint256) public shares;
  mapping(address => uint256) public released;
  address[] public payees;

  /**
   * @dev Constructor
   */
  function SplitPayment(address[] _payees, uint256[] _shares) public payable {
    require(_payees.length == _shares.length);

    for (uint256 i = 0; i < _payees.length; i++) {
      addPayee(_payees[i], _shares[i]);
    }
  }

  /**
   * @dev Add a new payee to the contract.
   * @param _payee The address of the payee to add.
   * @param _shares The number of shares owned by the payee.
   */
  function addPayee(address _payee, uint256 _shares) internal {
    require(_payee != address(0));
    require(_shares > 0);
    require(shares[_payee] == 0);

    payees.push(_payee);
    shares[_payee] = _shares;
    totalShares = totalShares.add(_shares);
  }

  /**
   * @dev Claim your share of the balance.
   */
  function claim() public {
    address payee = msg.sender;

    require(shares[payee] > 0);

    uint256 totalReceived = this.balance.add(totalReleased);
    uint256 payment = totalReceived.mul(shares[payee]).div(totalShares).sub(released[payee]);

    require(payment != 0);
    require(this.balance >= payment);

    released[payee] = released[payee].add(payment);
    totalReleased = totalReleased.add(payment);

    payee.transfer(payment);
  }

  /**
   * @dev payable fallback
   */
  function () public payable {}
}
/**
 * @title PullPayment
 * @dev Base contract supporting async send for pull payments. Inherit from this
 * contract and use asyncSend instead of send.
 */
contract PullPayment {
  using SafeMath for uint256;

  mapping(address => uint256) public payments;
  uint256 public totalPayments;

  /**
  * @dev Called by the payer to store the sent amount as credit to be pulled.
  * @param dest The destination address of the funds.
  * @param amount The amount to transfer.
  */
  function asyncSend(address dest, uint256 amount) internal {
    payments[dest] = payments[dest].add(amount);
    totalPayments = totalPayments.add(amount);
  }

  /**
  * @dev withdraw accumulated balance, called by payee.
  */
  function withdrawPayments() public {
    address payee = msg.sender;
    uint256 payment = payments[payee];

    require(payment != 0);
    require(this.balance >= payment);

    totalPayments = totalPayments.sub(payment);
    payments[payee] = 0;

    assert(payee.send(payment));
  }
}
