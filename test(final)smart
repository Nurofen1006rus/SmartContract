pragma solidity ^0.4.18;

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}


/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  uint256 public totalSupply;
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}


/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}


/**
 * @title Basic token
 * @dev Basic version of StandardToken, with no allowances.
 */
contract BasicToken is ERC20Basic {
  using SafeMath for uint256;

  mapping(address => uint256) balances;

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[msg.sender]);

    // SafeMath.sub will throw if there is not enough balance.
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

}


/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * @dev https://github.com/ethereum/EIPs/issues/20
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract StandardToken is ERC20, BasicToken {

  mapping (address => mapping (address => uint256)) internal allowed;


  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }

  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

}


/**
 * @title Burnable Token
 * @dev Token that can be irreversibly burned (destroyed).
 */
contract BurnableToken is StandardToken {

    event Burn(address indexed burner, uint256 value);

    /**
     * @dev Burns a specific amount of tokens.
     * @param _value The amount of token to be burned.
     */
    function burn(uint256 _value) public {
        require(_value > 0);
        require(_value <= balances[msg.sender]);
        // no need to require value <= totalSupply, since that would imply the
        // sender's balance is greater than the totalSupply, which *should* be an assertion failure

        address burner = msg.sender;
        balances[burner] = balances[burner].sub(_value);
        totalSupply = totalSupply.sub(_value);
        Burn(burner, _value);
    }
}


/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() public {
    owner = msg.sender;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }

}


/**
 * @title Pausable
 * @dev Base contract which allows children to implement an emergency stop mechanism.
 */
contract Pausable is Ownable {
  event Pause();
  event Unpause();

  bool public paused = false;


  /**
   * @dev Modifier to make a function callable only when the contract is not paused.
   */
  modifier whenNotPaused() {
    require(!paused);
    _;
  }

  /**
   * @dev Modifier to make a function callable only when the contract is paused.
   */
  modifier whenPaused() {
    require(paused);
    _;
  }

  /**
   * @dev called by the owner to pause, triggers stopped state
   */
  function pause() onlyOwner whenNotPaused public {
    paused = true;
    Pause();
  }

  /**
   * @dev called by the owner to unpause, returns to normal state
   */
  function unpause() onlyOwner whenPaused public {
    paused = false;
    Unpause();
  }
}


/**
 * @title Pausable token
 *
 * @dev StandardToken modified with pausable transfers.
 **/

contract PausableToken is StandardToken, Pausable {

  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
    return super.transfer(_to, _value);
  }

  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
    return super.transferFrom(_from, _to, _value);
  }

  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
    return super.approve(_spender, _value);
  }

  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
    return super.increaseApproval(_spender, _addedValue);
  }

  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
    return super.decreaseApproval(_spender, _subtractedValue);
  }
}


/**
 * @title Mintable token
 * @dev Simple ERC20 Token example, with mintable token creation
 * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120
 * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol
 */

contract MintableToken is StandardToken, Ownable {
  event Mint(address indexed to, uint256 amount);
  event MintFinished();

  bool public mintingFinished = false;


  modifier canMint() {
    require(!mintingFinished);
    _;
  }

  /**
   * @dev Function to mint tokens
   * @param _to The address that will receive the minted tokens.
   * @param _amount The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */
  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
    totalSupply = totalSupply.add(_amount);
    balances[_to] = balances[_to].add(_amount);
    Mint(_to, _amount);
    Transfer(address(0), _to, _amount);
    return true;
  }

  /**
   * @dev Function to stop minting new tokens.
   * @return True if the operation was successful.
   */
  function finishMinting() onlyOwner canMint public returns (bool) {
    mintingFinished = true;
    MintFinished();
    return true;
  }
}


/**
 * @title Capped token
 * @dev Mintable token with a token cap.
 */

contract CappedToken is MintableToken {

  uint256 public cap;

  function CappedToken(uint256 _cap) public {
    require(_cap > 0);
    cap = _cap;
  }

  /**
   * @dev Function to mint tokens
   * @param _to The address that will receive the minted tokens.
   * @param _amount The amount of tokens to mint.
   * @return A boolean that indicates if the operation was successful.
   */
  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
    require(totalSupply.add(_amount) <= cap);

    return super.mint(_to, _amount);
  }

}


/*******************************************************************************************
 * Token contract begins
 * Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity
 *******************************************************************************************/
contract IHTTokenFive is BurnableToken, PausableToken, CappedToken(IHTTokenFive.MAX_TOKENS) {
    //
    // CONSTANTS
    string  public constant name = "IHT Test Token v5";
    string  public constant symbol = "IHTFI";
    string  public constant version = "0.6";
    uint256 public constant DECIMALS = 4;
    uint256 public constant MAX_TOKENS = 1 * (10**8) * (10**DECIMALS);              // 100 Million IHTTestFive

    //
    // VARIABLES
    uint256 public privateHoldingPeriodEnds = 0;
    uint256 public presaleHoldingPeriodEnds = 0;

    // COMPLEX TYPE
    // This represent private, presale balance for investors.
    struct PreICOBalance {
        bool participated;          // if true, this account has participated in private, presale
        uint256 privateBalance;     // amount purchased in private sale - locked for 3 months (see constant)
        uint256 presaleBalance;     // amount purchased in presale - locked for 6 months (see constant)
    }

    // This declares a state variable that
    // stores a `PreICOPurchase` struct for each possible address.
    mapping(address => PreICOBalance) public PreICOPurchase;

    // Events
    event PrivateEndTimeChange(uint256 _endTime);
    event PresaleEndTimeChange(uint256 _endTime);

    //
    // MODIFIERS make sure balance are free of retriction to trade

    /*
     *@dev Fix for the ERC20 short address attack.
     */
    modifier checkPayloadSize(uint256 size) {
        require(msg.data.length >= size + 4);
        _;
    }
    
    modifier privateBalanceCheck(address _address, uint256 _value) {
        if (PreICOPurchase[_address].participated) {
            uint256 privateBalance = 0;
            
            // add private balance if they are still under restricted trading period
            if (now <= privateHoldingPeriodEnds) {
                privateBalance += PreICOPurchase[_address].privateBalance;
            }
        
            // add private balance if they are still under restricted trading period
            if (now <= presaleHoldingPeriodEnds) {
                privateBalance += PreICOPurchase[_address].presaleBalance;
            }
        
            /* check to make sure there is enough unrestricted balance to fund transfer */
            require ((balances[_address] - privateBalance) > _value);
        }
        _;
    }
    
    //
    // Setters
    /**
    * @dev Sets Private Holding Period Ends
    * @param _endTime defines when Private purchases are free to trade
    */
    function setPrivateEndTime(uint256 _endTime) external onlyOwner {
        require(_endTime != 0x0);
        privateHoldingPeriodEnds = _endTime;
        
        PrivateEndTimeChange(_endTime);
    }
    
    /**
    * @dev Sets Presale Holding Period Ends
    * @param _endTime defines when Presale purchases are free to trade
    */
    function setPresaleEndTime(uint256 _endTime) external onlyOwner {
        require(_endTime != 0x0);
        presaleHoldingPeriodEnds = _endTime;
        
        PresaleEndTimeChange(_endTime);
    }

    //
    // CONSTRUCTOR
    function IHTTokenFive(uint256 _privateHoldingEnds, uint256 _presaleHoldingEnds) public {        
        require(_privateHoldingEnds > 0);
        require(_presaleHoldingEnds > 0);

        privateHoldingPeriodEnds = _privateHoldingEnds;
        presaleHoldingPeriodEnds = _presaleHoldingEnds;
    }


    function adjustPreICOBalance(address _address, uint256 _value) internal {
        uint256 runningValue = _value;
        uint256 preICOBalance = 0;
    
        // spend presaleBalance first as they have longer restricted trading period (6 months)
        if (runningValue > 0 && now > presaleHoldingPeriodEnds) {
            preICOBalance = PreICOPurchase[_address].presaleBalance;
            if ((preICOBalance - runningValue) >= 0) {
                PreICOPurchase[_address].presaleBalance -= runningValue;
                runningValue = 0;
            } else {
                PreICOPurchase[_address].presaleBalance = 0;
                runningValue -= preICOBalance;            
            }
        }
    
        // spend privateBalance next as they have shorter restricted trading period (3 months)
        if (runningValue > 0 && now > privateHoldingPeriodEnds) {
            preICOBalance = PreICOPurchase[_address].privateBalance;
            if ((preICOBalance - runningValue) >= 0) {
                PreICOPurchase[_address].privateBalance -= runningValue;
                runningValue = 0;
            } else {
                PreICOPurchase[_address].privateBalance = 0;
                runningValue -= preICOBalance;            
            }
        }
    }

    
    /**
    * @dev transfer token for a specified address
    * @param _to The address to transfer to.
    * @param _value The amount to be transferred.
    */
//    function transfer(address _to, uint256 _value) public checkPayloadSize(2 * 32)  returns (bool) {
    function transfer(address _to, uint256 _value) public privateBalanceCheck(msg.sender, _value) returns (bool) {
        require(_to != address(0));

        /* call super to do the transfer */    
        bool fReturn = super.transfer(_to, _value);    
        
        /* adjust the amount in the (un)Locked mapping to deduct the amount transfer */
        adjustPreICOBalance(msg.sender, _value);
        
        return fReturn;
    }
  
    
    /**
     * @dev Transfer tokens from one address to another
     * @param _from address The address which you want to send tokens from
     * @param _to address The address which you want to transfer to
     * @param _value uint256 the amount of tokens to be transferred
     */
//    function transferFrom(address _from, address _to, uint256 _value) public checkPayloadSize(3 * 32) returns (bool) {
    function transferFrom(address _from, address _to, uint256 _value) public privateBalanceCheck(_from, _value) returns (bool) {
        require(_to != address(0));

        /* call super to do the transfer */    
        bool fReturn = super.transfer(_to, _value);    
    
        /* adjust the amount in the (un)Locked mapping to deduct the amount transfer */
        adjustPreICOBalance(_from, _value);
        
        return fReturn;
    }
  
    /**
     * @dev Function to mint Presale (6 months holding period) tokens
     * @param _to The address that will receive the minted tokens.
     * @param _amount The amount of tokens to mint.
     * @return A boolean that indicates if the operation was successful.
     */
    function mintPresale(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
        bool fReturn = super.mint(_to, _amount);
        
        if (fReturn) {
            PreICOBalance storage pb = PreICOPurchase[_to];
            pb.presaleBalance += _amount;
            pb.participated = true;
        }
        
        return fReturn;
    }

    /**
     * @dev Function to mint Private (3 month holding period) tokens
     * @param _to The address that will receive the minted tokens.
     * @param _amount The amount of tokens to mint.
     * @return A boolean that indicates if the operation was successful.
     */
    function mintPrivate(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
        bool fReturn = super.mint(_to, _amount);
        
        if (fReturn) {
            PreICOBalance storage pb = PreICOPurchase[_to];
            pb.privateBalance += _amount;
            pb.participated = true;
        }
        
        return fReturn;
    }
  

    /**
     * @dev Override MintableToken.finishMinting() to add canMint modifier
     * Token is no longer mintable after crowdsale (at finalization, token is minted to max, assign to owner)
     */
    function finishMinting() onlyOwner canMint public returns(bool) {
        return super.finishMinting();
    }
}

/*******************************************************************************************
 * @dev IHT Crowdsale contract. 
 * Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity
 *******************************************************************************************/
contract IHTCSFiveTwo is Ownable, Pausable {
    using SafeMath for uint256;
    
    /**************************************************************************
     * Constants
     **************************************************************************/
    uint256 public constant DECIMALS = 4;
    uint256 public constant MAX_TOKENS_AVAILABLE = 1 * (10**8) * (10**DECIMALS);        // 100Mil IHTTokenFive total
    uint256 public constant MAX_TOKENS_FOR_SALE = 35 * (10**6) * (10**DECIMALS);        // 35Mil IHTTokenFive

    /**************************************************************************
     * Variables
     **************************************************************************/
    IHTTokenFive public token;                  // The token being sold

    uint256 public startTime;                   // start and end timestamps where investments are allowed (both inclusive)
    uint256 public endTime;
    address public wallet;                      // address where funds are collected
    uint256 public rate;                        // how many token units a buyer gets per wei
    uint256 public weiRaised;                   // amount of raised money in wei

    bool public isFinalized = false;            // Finalization

    /**************************************************************************
     * Events
     **************************************************************************/
    event RateChange(uint256 rate);
    event WalletChange(address indexed newWallet);
    event EndTimeChange(uint256 endTime);

    /**
    * event for token purchase logging
    * @param purchaser who paid for the tokens
    * @param beneficiary who got the tokens
    * @param value weis paid for purchase
    * @param amount amount of tokens purchased
    */
    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);

    event Finalized();

    /**************************************************************************
     * Event Implementation
     **************************************************************************/
    /**
    * @dev Sets IHTTokenFive to Ether rate
    * @param _rate defines IHTv5/ETH rate: 1 ETH = _rate * IHTTokenFive
    */
    function setRate(uint256 _rate) external onlyOwner {
        require(_rate != 0x0);
        rate = _rate;
        
        RateChange(_rate);
    }

    /**
    * @dev Allows to adjust the crowdsale end time
    */
    function setEndTime(uint256 _endTime) external onlyOwner {
        require(!isFinalized);
        require(_endTime >= startTime);
        require(_endTime >= now);
        endTime = _endTime;
        
        EndTimeChange(_endTime);
    }

    /**
    * @dev Sets the wallet to forward ETH collected funds
    */
    function setWallet(address _wallet) external onlyOwner {
        require(_wallet != 0x0);
        wallet = _wallet;
        
        WalletChange(_wallet);
    }

    /**************************************************************************
     * Constructor
     **************************************************************************/
    /**
    * @dev Contructor
    * @param _startTime startTime of crowdsale
    * @param _endTime endTime of crowdsale
    * @param _rate IHT / ETH rate
    * @param _wallet wallet to forward the collected funds
    * @param _token token contract to link to this crowdsale contract
    */
    function IHTCSFiveTwo(
        uint256 _startTime,
        uint256 _endTime,
        uint256 _rate,
        address _wallet,
        address _token
    ) public
    {
        require(_startTime >= now);
        require(_endTime >= _startTime);
        require(_rate > 0);
        require(_wallet != address(0));
        require(_token != 0x0);

        startTime = _startTime;
        endTime = _endTime;
        rate = _rate;
        wallet = _wallet;        
        
        token = IHTTokenFive(_token);
        // token.pause();              // No token trade other than this crowdsale contract prior ICO period ends
    }

    // fallback function don't accept purchase
    function () external payable {
        revert();
    }

    /**************************************************************************
     * Finalization methods
     **************************************************************************/
    /**
     * @dev Must be called after crowdsale ends, to do some extra finalization
     * work. Calls the contract's finalization function.
     */
    function finalize() onlyOwner public {
        require(!isFinalized);
        require(hasEnded());

        finalization();
        Finalized();

        isFinalized = true;
    }

    // Overrided methods
    /**
    * @dev Finalizes the crowdsale
    */
    function finalization() internal {
        // Mint tokens up to MAX_TOKENS_AVAILABLE and assign to owner wallet
        if (token.totalSupply() < MAX_TOKENS_AVAILABLE) {
            uint256 tokens = MAX_TOKENS_AVAILABLE - token.totalSupply();  // Need to use SafeMath libray for subtraction
            token.mint(wallet, tokens);                                   // Mint up to total cap and assign to owner
        }

        // Stop minting after ICO period ends
        token.finishMinting();

        // take onwership over IHTTestThree contract
        token.transferOwnership(owner);

        // Token is now free to trade
        // token.unpause();  
    }

    /**************************************************************************
     * Token purchase methods
     **************************************************************************/
    // default buy function
    function buy() public payable {
        buyTokens(msg.sender);
    }

    // low level token purchase function
    function buyTokens(address beneficiary) public whenNotPaused payable {
        require(beneficiary != address(0));
        require(validPurchase());

        uint256 weiAmount = msg.value;

        // calculate token amount to be created
        uint256 tokens = weiAmount.mul(rate);

        // update state
        weiRaised = weiRaised.add(weiAmount);

        token.mint(beneficiary, tokens);
        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

        forwardFunds();
    }

    // send ether to the fund collection wallet
    // override to create custom fund forwarding mechanisms
    function forwardFunds() internal {
        wallet.transfer(msg.value);
    }

    // @return true if the transaction can buy tokens
    function validPurchase() internal constant returns (bool) {
        bool withinPeriod = now >= startTime && now <= endTime;
        bool nonZeroPurchase = msg.value != 0;

        uint256 tokens = token.totalSupply().add(msg.value.mul(rate));
        bool withinCap = tokens <= MAX_TOKENS_FOR_SALE;
        
        return withinPeriod && nonZeroPurchase && withinCap && !paused;
    }

    // overriding Crowdsale#hasEnded to add tokens cap logic
    // @return true if crowdsale event has ended
    function hasEnded() public constant returns(bool) {
        bool capReached = token.totalSupply() >= MAX_TOKENS_FOR_SALE;
        return now > endTime || capReached;
    }
}
